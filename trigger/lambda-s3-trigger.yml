AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  An Amazon S3 trigger that retrieves metadata for the object that has been
  updated.
Parameters:
  ContainerName:
    Type: String
    Description: Name of service
  ServiceName:
    Type: String
    Description: Name of service
  BucketName:
    Type: String
    Description: Name of S3 bucket for lambda trigger
  ECSCluster:
    Type: String
    Description: ECS Cluster
  TaskSubnet1: 
    Default: ""
    Type: String
    Description: Subnet IDs to launch fargate task
  TaskSubnet2: 
    Default: ""
    Type: String
    Description: Subnet IDs to launch fargate task
  Image:
    Type: String
    Description: Docker image repository
  TaskRoleArn:
    Type: String
    Description: Task Role ARN for lambda function
  CPU:
    Type: String
    Default: 256
    Description: CPU for task definition
  Memory:
    Type: String
    Default: 512
    Description: Memory for task definition
  ContainerSG:
    Type: String
    Description: Security group for fargate task
  Environment:
    Type: String
    Description: JSON string of environment variables to be parsed by lambda function
Resources:
  BatchTrigger:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: .
      Description: >-
        An Amazon S3 trigger that retrieves metadata for the object that has
        been updated.
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          CLUSTER: !Ref ECSCluster
          TASK_DEFINITION: !Ref taskdefinition
          SUBNET1: !Ref TaskSubnet1
          SUBNET2: !Ref TaskSubnet2
          TASK_ROLE_ARN: !Ref TaskRoleArn 
          NAME: !Ref ContainerName
          SECURITYGROUP: !Ref ContainerSG
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow  ##TODO- is this redundant?
              Action:
              - ecs:RunTask
              Resource:
              - "*"
            - Effect: Allow  ## Is this necessary?
              Action:
              - iam:PassRole
              Resource:
              # - !Ref ECSTaskExecutionRole
              - "*"
            - Effect: Allow
              Action:
                - 's3:GetObject'
              Resource: 'arn:aws:s3:::*'
            - Effect: Allow
              Action: 
                - "ecs:DescribeServices"
                - "ecs:DescribeTaskDefinition"
                - "ecs:DescribeTasks"
                - "ecs:ListServices"
                - "ecs:ListTaskDefinitionFamilies"
                - "ecs:ListTaskDefinitions"
                - "ecs:ListTasks"
                - "ecs:RegisterTaskDefinition"
                - "ecs:RunTask"
                - "ecs:StartTask"
                - "ecs:StopTask"
                - "ecs:UpdateService"
              Resource: !Ref TaskRoleArn
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - 's3:ObjectCreated:*'

  Bucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref 'BucketName'
####################################
## AWS ECS Service definition
##
####################################

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', !Ref ContainerName]]
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE 
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Cpu: !Ref CPU
      Memory: !Ref Memory
      ContainerDefinitions:
      -
        Name: !Ref ContainerName
        Image: !Ref Image
        Environment:
        - Name: ENV_JSON
          Value: '{"NEW_BUCKET": "dummyfargatebatchrunnerbucket"}'
        Essential: "true"   
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs
  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  CloudwatchLogsGroup:
   Type: AWS::Logs::LogGroup
   Properties:
     LogGroupName: !Join ['-', [!Ref ServiceName, !Ref 'AWS::StackName']]
     RetentionInDays: 14
